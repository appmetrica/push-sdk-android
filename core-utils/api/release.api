public final class io.appmetrica.analytics.push.coreutils.BuildConfig {
    public static final String BUILD_TYPE
    public static final boolean DEBUG
    public static final String LIBRARY_PACKAGE_NAME

    public <init>()
}

public final class io.appmetrica.analytics.push.coreutils.internal.CommandServiceWrapper {
    public <init>()
    public final void setPushServiceControllerProvider([NonNull] io.appmetrica.analytics.push.coreutils.internal.service.PushServiceControllerProvider)
    public final void startCommand([NonNull] android.content.Context, [NonNull] android.os.Bundle, boolean)
}

public class io.appmetrica.analytics.push.coreutils.internal.CoreConstants {
    public static final String EXCEPTION_MESSAGE_ERROR_ACTIVATE
    public static final String EXTRA_TRANSPORT
    public static final String LINK_TO_INTEGRATION_PUSH_SDK
    public static final String MIN_PROCESSING_DELAY

    public <init>()
}

public static class io.appmetrica.analytics.push.coreutils.internal.CoreConstants$PushMessage {
    public static final String PROCESSING_MIN_TIME
    public static final String ROOT_ELEMENT
    public static final String SERVICE_TYPE

    public <init>()
}

public static class io.appmetrica.analytics.push.coreutils.internal.CoreConstants$Transport {
    public static final String FIREBASE
    public static final String GCM
    public static final String HMS
    public static final String RUSTORE
    public static final String UNKNOWN

    public <init>()
}

public final class io.appmetrica.analytics.push.coreutils.internal.PushServiceFacade {
    public static final [NonNull] io.appmetrica.analytics.push.coreutils.internal.PushServiceFacade INSTANCE

    public static final void initPushService([NonNull] android.content.Context)
    public static final void initToken([NonNull] android.content.Context, [NonNull] String)
    public static final void processPush([NonNull] android.content.Context, [NonNull] android.os.Bundle, [NonNull] String)
    public static final void sendSystemInfo([NonNull] android.content.Context, [Nullable] Long)
    public static final void sendToken([NonNull] android.content.Context, [NonNull] String, [Nullable] String)
    public static final void sendTokenManually([NonNull] android.content.Context, [NonNull] String, [Nullable] String)
    public static final void sendTokenOnRefresh([NonNull] android.content.Context, [NonNull] String, [Nullable] String)
    public static final void setJobIntentServiceWrapper([NonNull] io.appmetrica.analytics.push.coreutils.internal.CommandServiceWrapper)
}

public final class io.appmetrica.analytics.push.coreutils.internal.commands.Commands {
    public static final [NonNull] String EXTRA_COMMAND
    public static final [NonNull] String EXTRA_COMMAND_RECEIVED_TIME
    public static final [NonNull] io.appmetrica.analytics.push.coreutils.internal.commands.Commands INSTANCE
}

public static final class io.appmetrica.analytics.push.coreutils.internal.commands.Commands$InitPushService {
    public static final [NonNull] String COMMAND_ACTION
    public static final [NonNull] io.appmetrica.analytics.push.coreutils.internal.commands.Commands$InitPushService INSTANCE
}

public static final class io.appmetrica.analytics.push.coreutils.internal.commands.Commands$ProcessPush {
    public static final [NonNull] String COMMAND_ACTION
    public static final [NonNull] io.appmetrica.analytics.push.coreutils.internal.commands.Commands$ProcessPush INSTANCE
}

public static final class io.appmetrica.analytics.push.coreutils.internal.commands.Commands$SendPushToken {
    public static final [NonNull] String EXTRA_INFO
    public static final [NonNull] String INIT_PUSH_TOKEN_COMMAND_ACTION
    public static final [NonNull] io.appmetrica.analytics.push.coreutils.internal.commands.Commands$SendPushToken INSTANCE
    public static final [NonNull] String SEND_PUSH_TOKEN_MANUALLY_COMMAND_ACTION
    public static final [NonNull] String SEND_PUSH_TOKEN_ON_REFRESH_COMMAND_ACTION
    public static final [NonNull] String UPDATE_PUSH_TOKEN_COMMAND_ACTION
}

public static final class io.appmetrica.analytics.push.coreutils.internal.commands.Commands$UpdateSystemInfo {
    public static final [NonNull] String COMMAND_ACTION
    public static final [NonNull] String EXTRA_INFO
    public static final [NonNull] io.appmetrica.analytics.push.coreutils.internal.commands.Commands$UpdateSystemInfo INSTANCE
}

public final class io.appmetrica.analytics.push.coreutils.internal.commands.PushTokenCommandInfo {
    public static final [NonNull] io.appmetrica.analytics.push.coreutils.internal.commands.PushTokenCommandInfo$Companion Companion

    public final boolean getForce()
    public final [NonNull] String getProvider()
    public final [Nullable] String getToken()
    public final [NonNull] android.os.Bundle toBundle()
}

public static final class io.appmetrica.analytics.push.coreutils.internal.commands.PushTokenCommandInfo$Builder {
    public <init>([NonNull] String)
    public final [NonNull] io.appmetrica.analytics.push.coreutils.internal.commands.PushTokenCommandInfo build()
    public final [NonNull] io.appmetrica.analytics.push.coreutils.internal.commands.PushTokenCommandInfo$Builder withForce(boolean)
    public final [NonNull] io.appmetrica.analytics.push.coreutils.internal.commands.PushTokenCommandInfo$Builder withToken([Nullable] String)
}

public static final class io.appmetrica.analytics.push.coreutils.internal.commands.PushTokenCommandInfo$Companion {
    public final [NonNull] io.appmetrica.analytics.push.coreutils.internal.commands.PushTokenCommandInfo fromBundle([NonNull] android.os.Bundle)
}

public final class io.appmetrica.analytics.push.coreutils.internal.commands.SystemInfoCommandInfo {
    public static final [NonNull] io.appmetrica.analytics.push.coreutils.internal.commands.SystemInfoCommandInfo$Companion Companion

    public final [Nullable] Long getStatusChangeTime()
    public final [NonNull] android.os.Bundle toBundle()
}

public static final class io.appmetrica.analytics.push.coreutils.internal.commands.SystemInfoCommandInfo$Builder {
    public <init>()
    public final [NonNull] io.appmetrica.analytics.push.coreutils.internal.commands.SystemInfoCommandInfo build()
    public final [NonNull] io.appmetrica.analytics.push.coreutils.internal.commands.SystemInfoCommandInfo$Builder withStatusChangeTime([Nullable] Long)
}

public static final class io.appmetrica.analytics.push.coreutils.internal.commands.SystemInfoCommandInfo$Companion {
    public final [NonNull] io.appmetrica.analytics.push.coreutils.internal.commands.SystemInfoCommandInfo fromBundle([NonNull] android.os.Bundle)
}

public class io.appmetrica.analytics.push.coreutils.internal.model.BasePushMessage {
    public <init>([NonNull] android.os.Bundle)
    public final [Nullable] org.json.JSONObject getRoot()
    public final [Nullable] String getRootString()
    public final boolean isOwnPush()
}

public enum io.appmetrica.analytics.push.coreutils.internal.model.ServiceType {
    APPMETRICA_PUSH_SERVICE, PROVIDER_SERVICE, UNKNOWN

    public static final [NonNull] io.appmetrica.analytics.push.coreutils.internal.model.ServiceType$Companion Companion

    public static final [NonNull] io.appmetrica.analytics.push.coreutils.internal.model.ServiceType fromValue(int)
    public final int getValue()
    public static io.appmetrica.analytics.push.coreutils.internal.model.ServiceType valueOf(String)
    public static io.appmetrica.analytics.push.coreutils.internal.model.ServiceType[] values()
}

public static final class io.appmetrica.analytics.push.coreutils.internal.model.ServiceType$Companion {
    public final [NonNull] io.appmetrica.analytics.push.coreutils.internal.model.ServiceType fromValue(int)
}

public final class io.appmetrica.analytics.push.coreutils.internal.model.TransportPushMessage extends io.appmetrica.analytics.push.coreutils.internal.model.BasePushMessage {
    public <init>([NonNull] android.os.Bundle)
    public final [Nullable] Long getProcessingMinTime()
    public final [NonNull] io.appmetrica.analytics.push.coreutils.internal.model.ServiceType getServiceType()
}

public final class io.appmetrica.analytics.push.coreutils.internal.service.NoServiceController implementation io.appmetrica.analytics.push.coreutils.internal.service.PushServiceCommandLauncher {
    public <init>([NonNull] android.content.Context)
    public void launchService([NonNull] android.os.Bundle)
}

public final class io.appmetrica.analytics.push.coreutils.internal.service.NoServiceControllerKt

public interface io.appmetrica.analytics.push.coreutils.internal.service.PushServiceCommandLauncher {
    public abstract void launchService([NonNull] android.os.Bundle)
}

public class io.appmetrica.analytics.push.coreutils.internal.service.PushServiceControllerProvider {
    public <init>([NonNull] android.content.Context)
    public [NonNull] io.appmetrica.analytics.push.coreutils.internal.service.PushServiceCommandLauncher getPushServiceCommandLauncher(boolean)
    public [NonNull] io.appmetrica.analytics.push.coreutils.internal.service.PushServiceCommandLauncher OBFUSCATED[io.appmetrica.analytics.push.coreutils.internal.service.PushServiceControllerProvider$NoServiceCreator.getPushServiceCommandLauncher]()
}

public interface io.appmetrica.analytics.push.coreutils.internal.utils.ConsumerWithThrowable<T> {
    public abstract void consume([NonNull] T)
}

public class io.appmetrica.analytics.push.coreutils.internal.utils.CoreUtils {
    public <init>()
    public static <T> void accessSystemServiceSafely([NonNull] io.appmetrica.analytics.push.coreutils.internal.utils.ConsumerWithThrowable<T>, [Nullable] T, [NonNull] String, [NonNull] String)
    public static [Nullable] String extractRootElement([NonNull] android.os.Bundle)
    public static [NonNull] android.os.Bundle fromMapToBundle([Nullable] java.util.Map<String, String>)
    public static int getIdentifierForType([NonNull] android.content.Context, [NonNull] String, [Nullable] String)
    public static android.os.Bundle getMetaData([NonNull] android.content.Context)
    public static [Nullable] String getStringFromMetaData([NonNull] android.content.Context, [NonNull] String)
    public static [Nullable] String getStringFromResources([NonNull] android.content.Context, [NonNull] String)
    public static [Nullable] String getStringOrOtherFromMetaData([NonNull] android.content.Context, [NonNull] String)
    public static boolean isEmpty([Nullable] String)
    public static boolean isNotEmpty([Nullable] String)
    public static boolean isNotificationRelatedToSDK([NonNull] android.os.Bundle)
}

public @interface io.appmetrica.analytics.push.coreutils.internal.utils.DoNotInline

public abstract class io.appmetrica.analytics.push.coreutils.internal.utils.JsonUtils {
    public static [Nullable] Boolean extractBooleanSafely([Nullable] org.json.JSONObject, [NonNull] String)
    public static [Nullable] Integer extractIntegerSafely([Nullable] org.json.JSONObject, [NonNull] String)
    public static [Nullable] Long extractLongSafely([Nullable] org.json.JSONObject, [NonNull] String)
    public static [Nullable] String extractStringSafely([Nullable] org.json.JSONObject, [NonNull] String)
    public static [Nullable] org.json.JSONObject merge([Nullable] org.json.JSONObject, [Nullable] org.json.JSONObject)
    public static boolean optBoolean([Nullable] org.json.JSONObject, [NonNull] String, boolean)
}

public interface io.appmetrica.analytics.push.coreutils.internal.utils.Tracker {
    public abstract void pauseSession()
    public abstract void reportError([NonNull] String, [Nullable] Throwable)
    public abstract void reportEvent([NonNull] String)
    public abstract void reportEvent([NonNull] String, [Nullable] java.util.Map<String, Object>)
    public abstract void reportUnhandledException([NonNull] Throwable)
    public abstract void resumeSession()
}

public class io.appmetrica.analytics.push.coreutils.internal.utils.TrackersHub implementation io.appmetrica.analytics.push.coreutils.internal.utils.Tracker {
    public <init>()
    public static [NonNull] io.appmetrica.analytics.push.coreutils.internal.utils.TrackersHub getInstance()
    public void pauseSession()
    public void registerTracker([NonNull] io.appmetrica.analytics.push.coreutils.internal.utils.Tracker)
    public void reportError([NonNull] String, [Nullable] Throwable)
    public void reportEvent([NonNull] String)
    public void reportEvent([NonNull] String, [Nullable] java.util.Map<String, Object>)
    public void reportUnhandledException([NonNull] Throwable)
    public void resumeSession()
}

